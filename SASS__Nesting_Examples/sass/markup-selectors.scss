/**
 * Over Nesting
 *
 * A common mistake, as nesting in this manner has the
 * benefit of replicating the markup pattern, but it
 * creates overly specific selector chains
*/
nav {
  background: #000;

  /**
   * outputs as: nav ul {}
   */
  ul {
    color: #fff;
    overflow: hidden;

    /**
     * outputs as: nav ul li {}
     */
    li {
      float: left;

      /**
       * outputs as: nav ul li a {}
       */
      a {
        display: block;
        padding: 8px;
      }
    }
  }
}


/**
 * Appropriate Nesting
 *
 * Keeping selector chains short decreases specificity,
 * allowing for decreased effort in updating styles
 * for pattern variants and visual state changes.
*/
nav {
  background: #222;

  /**
   * outputs as: nav ul {}
   */
  ul {
    color: #eee;
    overflow: hidden;
  }

  /**
   * outputs as: nav li {}
   */
  li {
    float: left;
  }

  /**
   * outputs as: nav a {}
   */
  a {
    display: block;
    padding: 8px;
  }
} // end nav


/**
 * Nesting with various selector types
 *
 * The previous examples used native HTML tag selectors
 * to keep things simple. Here's an example using
 * various different selectors to show a bit more
 * real-world variety.
*/

#nav {
  background: #000;

  /**
   * outputs as: #nav .nav-item {}
   */
  .nav-item {
    display: inline-block;
  }

  /**
   * outputs as: #nav a {}
   */
  a {
    color: #fff;
    display: block;
    padding: 8px;
  }

  /**
   * outputs as:
   *   #nav a:hover,
   *   #nav a:focus {}
   */
  a:hover,
  a:focus {
    box-shadow: inset 0 0 2px 0 rgba(0,0,0,.8);
  }

  /**
   * outputs as: #nav a + ul {}
   */
  a + ul {
    display: none;
  }

  /**
   * outputs as:
   *   #nav a:hover + ul,
   *   #nav a:focus + ul {}
   */
  a:hover + ul,
  a:focus + ul {
    display: block;
  }

  /**
   * outputs as: #nav [data-example] {}
   */
  [data-example] {
    border: 1px solid;
  }
}
